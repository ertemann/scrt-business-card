"use strict";
// For future wanderers:
// This file is written manually with a few goals in mind:
// 1. Proxy the auto-generated QueryClientImpl from "src/protobuf_stuff/cosmos/auth/v1beta1/query.tx" (See the "scripts/generate_protobuf.sh" script)
// 2. Convert the "account: Any" in the underlying types to the acctual account type
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthQuerier = void 0;
/** AuthQuerier is the query interface for the x/auth module */
class AuthQuerier {
    constructor(grpc) {
        this.grpc = grpc;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.client) {
                this.client = new (yield Promise.resolve().then(() => __importStar(require("../protobuf_stuff/cosmos/auth/v1beta1/query")))).QueryClientImpl(this.grpc);
            }
        });
    }
    /** returns all the existing accounts */
    accounts(request) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.init();
            const response = yield this.client.accounts(request);
            return Promise.all(response.accounts.map((a) => accountFromAny(a)));
        });
    }
    /** returns account details based on address. */
    account({ address, }) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.init();
            const response = yield this.client.account({ address });
            return response.account ? accountFromAny(response.account) : null;
        });
    }
    /** queries all parameters. */
    params() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.init();
            return yield this.client.params({});
        });
    }
}
exports.AuthQuerier = AuthQuerier;
/**
 * Takes an `Any` encoded account from the chain and converts it into common `Account` types.
 * Adapted from https://github.com/cosmos/cosmjs/blob/17ea689da849aec49055a7985a9780a1c7d581ac/packages/stargate/src/accounts.ts#L38-L84
 */
function accountFromAny(input) {
    return __awaiter(this, void 0, void 0, function* () {
        const { typeUrl, value } = input;
        switch (typeUrl) {
            // auth
            case "/cosmos.auth.v1beta1.BaseAccount":
                const { BaseAccount } = yield Promise.resolve().then(() => __importStar(require("../protobuf_stuff/cosmos/auth/v1beta1/auth")));
                return { type: "BaseAccount", account: BaseAccount.decode(value) };
            case "/cosmos.auth.v1beta1.ModuleAccount":
                const { ModuleAccount } = yield Promise.resolve().then(() => __importStar(require("../protobuf_stuff/cosmos/auth/v1beta1/auth")));
                return { type: "ModuleAccount", account: ModuleAccount.decode(value) };
            // vesting
            case "/cosmos.vesting.v1beta1.BaseVestingAccount":
                const { BaseVestingAccount } = yield Promise.resolve().then(() => __importStar(require("../protobuf_stuff/cosmos/vesting/v1beta1/vesting")));
                return {
                    type: "BaseVestingAccount",
                    account: BaseVestingAccount.decode(value),
                };
            default:
                throw new Error(`Unsupported type: '${typeUrl}'`);
        }
    });
}
//# sourceMappingURL=auth.js.map