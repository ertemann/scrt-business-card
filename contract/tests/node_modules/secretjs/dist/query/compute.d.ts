import { EncryptionUtils } from "../encryption";
/** QueryContractInfoRequest is the request type for the Query/ContractInfo RPC method */
export declare type QueryContractInfoRequest = {
    /** address is the address of the contract to query */
    address: string;
};
/** QueryContractInfoResponse is the response type for the Query/ContractInfo RPC method */
export declare type QueryContractInfoResponse = {
    /** address is the address of the contract */
    address: string;
    ContractInfo: ContractInfo;
};
/** ContractInfo stores a WASM contract instance */
export declare type ContractInfo = {
    codeId: string;
    creator: string;
    label: string;
    created?: AbsoluteTxPosition;
};
/** AbsoluteTxPosition can be used to sort contracts */
export declare type AbsoluteTxPosition = {
    /** BlockHeight is the block the contract was created at */
    blockHeight: string;
    /** TxIndex is a monotonic counter within the block (actual transaction index, or gas consumed) */
    txIndex: string;
};
export declare type QueryContractsByCodeRequest = {
    codeId: string;
};
export declare type QueryContractsByCodeResponse = {
    contractInfos: ContractInfoWithAddress[];
};
/** ContractInfoWithAddress adds the address (key) to the ContractInfo representation */
export declare type ContractInfoWithAddress = {
    address: string;
    ContractInfo?: ContractInfo;
};
export declare type QueryContractRequest<T> = {
    /** The address of the contract */
    contractAddress: string;
    /** The SHA256 hash value of the contract's WASM bytecode, represented as case-insensitive 64
     * character hex string.
     * This is used to make sure only the contract that's being invoked can decrypt the query data.
     *
     * codeHash is an optional parameter but using it will result in way faster execution time.
     *
     * Valid examples:
     * - "af74387e276be8874f07bec3a87023ee49b0e7ebe08178c49d0a49c3c98ed60e"
     * - "0xaf74387e276be8874f07bec3a87023ee49b0e7ebe08178c49d0a49c3c98ed60e"
     * - "AF74387E276BE8874F07BEC3A87023EE49B0E7EBE08178C49D0A49C3C98ED60E"
     * - "0xAF74387E276BE8874F07BEC3A87023EE49B0E7EBE08178C49D0A49C3C98ED60E"
     */
    codeHash?: string;
    /** A JSON object that will be passed to the contract as a query */
    query: T;
};
export declare type CodeInfoResponse = {
    codeId: string;
    creator: string;
    codeHash: string;
    source: string;
    builder: string;
};
export declare type QueryCodeResponse = {
    codeInfo: CodeInfoResponse;
    data: Uint8Array;
};
export declare class ComputeQuerier {
    private readonly grpc;
    private encryption?;
    private client?;
    private codeHashCache;
    constructor(grpc: import("../protobuf_stuff/secret/compute/v1beta1/query").GrpcWebImpl, encryption?: EncryptionUtils);
    private init;
    /** Get codeHash of a Secret Contract */
    contractCodeHash(address: string): Promise<string>;
    /** Get codeHash from a code id */
    codeHash(codeId: number): Promise<string>;
    /** Get metadata of a Secret Contract */
    contractInfo(address: string): Promise<QueryContractInfoResponse>;
    /** Get all contracts that were instantiated from a code id */
    contractsByCode(codeId: number): Promise<QueryContractsByCodeResponse>;
    /** Query a Secret Contract */
    queryContract<T extends object, R extends object>({ contractAddress, codeHash, query, }: QueryContractRequest<T>): Promise<R>;
    /** Get WASM bytecode and metadata for a code id */
    code(codeId: number): Promise<QueryCodeResponse>;
    codes(): Promise<CodeInfoResponse[]>;
}
export declare function addressToBytes(address: string): Uint8Array;
export declare function bytesToAddress(bytes: Uint8Array, prefix?: string): string;
//# sourceMappingURL=compute.d.ts.map