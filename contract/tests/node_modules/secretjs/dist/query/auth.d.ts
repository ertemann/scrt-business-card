declare type AccountData = {
    type: "BaseAccount" | "ModuleAccount" | "BaseVestingAccount";
    account: import("../protobuf_stuff/cosmos/auth/v1beta1/auth").BaseAccount | import("../protobuf_stuff/cosmos/auth/v1beta1/auth").ModuleAccount | import("../protobuf_stuff/cosmos/vesting/v1beta1/vesting").BaseVestingAccount;
};
export declare type Account = AccountData | null;
export declare type BaseAccount = {
    address: string;
    accountNumber: string;
    sequence: string;
};
export declare type ModuleAccount = {
    baseAccount?: BaseAccount;
    name: string;
    permissions: string[];
};
/** AuthQuerier is the query interface for the x/auth module */
export declare class AuthQuerier {
    private client?;
    private readonly grpc;
    constructor(grpc: import("../protobuf_stuff/secret/compute/v1beta1/query").GrpcWebImpl);
    private init;
    /** returns all the existing accounts */
    accounts(request: import("../protobuf_stuff/cosmos/auth/v1beta1/query").QueryAccountsRequest): Promise<Account[]>;
    /** returns account details based on address. */
    account({ address, }: import("../protobuf_stuff/cosmos/auth/v1beta1/query").QueryAccountRequest): Promise<Account>;
    /** queries all parameters. */
    params(): Promise<import("../protobuf_stuff/cosmos/auth/v1beta1/query").QueryParamsResponse>;
}
export {};
//# sourceMappingURL=auth.d.ts.map