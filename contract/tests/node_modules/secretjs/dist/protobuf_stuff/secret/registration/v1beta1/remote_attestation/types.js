"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlatformInfoBlob = exports.SGXEC256Signature = exports.EndorsedAttestationReport = exports.QuoteReportData = exports.QuoteReportBody = exports.QuoteReport = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "secret.registration.remote_attestation.v1beta1";
function createBaseQuoteReport() {
    return {
        id: "",
        timestamp: "",
        version: "0",
        isvEnclaveQuoteStatus: "",
        platformInfoBlob: "",
        isvEnclaveQuoteBody: "",
        advisoryIds: [],
    };
}
exports.QuoteReport = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.timestamp !== "") {
            writer.uint32(18).string(message.timestamp);
        }
        if (message.version !== "0") {
            writer.uint32(24).uint64(message.version);
        }
        if (message.isvEnclaveQuoteStatus !== "") {
            writer.uint32(34).string(message.isvEnclaveQuoteStatus);
        }
        if (message.platformInfoBlob !== "") {
            writer.uint32(42).string(message.platformInfoBlob);
        }
        if (message.isvEnclaveQuoteBody !== "") {
            writer.uint32(50).string(message.isvEnclaveQuoteBody);
        }
        for (const v of message.advisoryIds) {
            writer.uint32(58).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuoteReport();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.timestamp = reader.string();
                    break;
                case 3:
                    message.version = longToString(reader.uint64());
                    break;
                case 4:
                    message.isvEnclaveQuoteStatus = reader.string();
                    break;
                case 5:
                    message.platformInfoBlob = reader.string();
                    break;
                case 6:
                    message.isvEnclaveQuoteBody = reader.string();
                    break;
                case 7:
                    message.advisoryIds.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            timestamp: isSet(object.timestamp) ? String(object.timestamp) : "",
            version: isSet(object.version) ? String(object.version) : "0",
            isvEnclaveQuoteStatus: isSet(object.isvEnclaveQuoteStatus)
                ? String(object.isvEnclaveQuoteStatus)
                : "",
            platformInfoBlob: isSet(object.platformInfoBlob)
                ? String(object.platformInfoBlob)
                : "",
            isvEnclaveQuoteBody: isSet(object.isvEnclaveQuoteBody)
                ? String(object.isvEnclaveQuoteBody)
                : "",
            advisoryIds: Array.isArray(object === null || object === void 0 ? void 0 : object.advisoryIds)
                ? object.advisoryIds.map((e) => String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.timestamp !== undefined && (obj.timestamp = message.timestamp);
        message.version !== undefined && (obj.version = message.version);
        message.isvEnclaveQuoteStatus !== undefined &&
            (obj.isvEnclaveQuoteStatus = message.isvEnclaveQuoteStatus);
        message.platformInfoBlob !== undefined &&
            (obj.platformInfoBlob = message.platformInfoBlob);
        message.isvEnclaveQuoteBody !== undefined &&
            (obj.isvEnclaveQuoteBody = message.isvEnclaveQuoteBody);
        if (message.advisoryIds) {
            obj.advisoryIds = message.advisoryIds.map((e) => e);
        }
        else {
            obj.advisoryIds = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseQuoteReport();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.timestamp = (_b = object.timestamp) !== null && _b !== void 0 ? _b : "";
        message.version = (_c = object.version) !== null && _c !== void 0 ? _c : "0";
        message.isvEnclaveQuoteStatus = (_d = object.isvEnclaveQuoteStatus) !== null && _d !== void 0 ? _d : "";
        message.platformInfoBlob = (_e = object.platformInfoBlob) !== null && _e !== void 0 ? _e : "";
        message.isvEnclaveQuoteBody = (_f = object.isvEnclaveQuoteBody) !== null && _f !== void 0 ? _f : "";
        message.advisoryIds = ((_g = object.advisoryIds) === null || _g === void 0 ? void 0 : _g.map((e) => e)) || [];
        return message;
    },
};
function createBaseQuoteReportBody() {
    return { mrEnclave: "", mrSigner: "", reportData: "" };
}
exports.QuoteReportBody = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.mrEnclave !== "") {
            writer.uint32(10).string(message.mrEnclave);
        }
        if (message.mrSigner !== "") {
            writer.uint32(18).string(message.mrSigner);
        }
        if (message.reportData !== "") {
            writer.uint32(26).string(message.reportData);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuoteReportBody();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mrEnclave = reader.string();
                    break;
                case 2:
                    message.mrSigner = reader.string();
                    break;
                case 3:
                    message.reportData = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            mrEnclave: isSet(object.mrEnclave) ? String(object.mrEnclave) : "",
            mrSigner: isSet(object.mrSigner) ? String(object.mrSigner) : "",
            reportData: isSet(object.reportData) ? String(object.reportData) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.mrEnclave !== undefined && (obj.mrEnclave = message.mrEnclave);
        message.mrSigner !== undefined && (obj.mrSigner = message.mrSigner);
        message.reportData !== undefined && (obj.reportData = message.reportData);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseQuoteReportBody();
        message.mrEnclave = (_a = object.mrEnclave) !== null && _a !== void 0 ? _a : "";
        message.mrSigner = (_b = object.mrSigner) !== null && _b !== void 0 ? _b : "";
        message.reportData = (_c = object.reportData) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseQuoteReportData() {
    return { version: "0", signType: "0", reportBody: undefined };
}
exports.QuoteReportData = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.version !== "0") {
            writer.uint32(8).uint64(message.version);
        }
        if (message.signType !== "0") {
            writer.uint32(16).uint64(message.signType);
        }
        if (message.reportBody !== undefined) {
            exports.QuoteReportBody.encode(message.reportBody, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuoteReportData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.version = longToString(reader.uint64());
                    break;
                case 2:
                    message.signType = longToString(reader.uint64());
                    break;
                case 3:
                    message.reportBody = exports.QuoteReportBody.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            version: isSet(object.version) ? String(object.version) : "0",
            signType: isSet(object.signType) ? String(object.signType) : "0",
            reportBody: isSet(object.reportBody)
                ? exports.QuoteReportBody.fromJSON(object.reportBody)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.version !== undefined && (obj.version = message.version);
        message.signType !== undefined && (obj.signType = message.signType);
        message.reportBody !== undefined &&
            (obj.reportBody = message.reportBody
                ? exports.QuoteReportBody.toJSON(message.reportBody)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQuoteReportData();
        message.version = (_a = object.version) !== null && _a !== void 0 ? _a : "0";
        message.signType = (_b = object.signType) !== null && _b !== void 0 ? _b : "0";
        message.reportBody =
            object.reportBody !== undefined && object.reportBody !== null
                ? exports.QuoteReportBody.fromPartial(object.reportBody)
                : undefined;
        return message;
    },
};
function createBaseEndorsedAttestationReport() {
    return {
        report: new Uint8Array(),
        signature: new Uint8Array(),
        signingCert: new Uint8Array(),
    };
}
exports.EndorsedAttestationReport = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.report.length !== 0) {
            writer.uint32(10).bytes(message.report);
        }
        if (message.signature.length !== 0) {
            writer.uint32(18).bytes(message.signature);
        }
        if (message.signingCert.length !== 0) {
            writer.uint32(26).bytes(message.signingCert);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEndorsedAttestationReport();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.report = reader.bytes();
                    break;
                case 2:
                    message.signature = reader.bytes();
                    break;
                case 3:
                    message.signingCert = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            report: isSet(object.report)
                ? bytesFromBase64(object.report)
                : new Uint8Array(),
            signature: isSet(object.signature)
                ? bytesFromBase64(object.signature)
                : new Uint8Array(),
            signingCert: isSet(object.signingCert)
                ? bytesFromBase64(object.signingCert)
                : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.report !== undefined &&
            (obj.report = base64FromBytes(message.report !== undefined ? message.report : new Uint8Array()));
        message.signature !== undefined &&
            (obj.signature = base64FromBytes(message.signature !== undefined ? message.signature : new Uint8Array()));
        message.signingCert !== undefined &&
            (obj.signingCert = base64FromBytes(message.signingCert !== undefined
                ? message.signingCert
                : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseEndorsedAttestationReport();
        message.report = (_a = object.report) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.signature = (_b = object.signature) !== null && _b !== void 0 ? _b : new Uint8Array();
        message.signingCert = (_c = object.signingCert) !== null && _c !== void 0 ? _c : new Uint8Array();
        return message;
    },
};
function createBaseSGXEC256Signature() {
    return { gx: "", gy: "" };
}
exports.SGXEC256Signature = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.gx !== "") {
            writer.uint32(10).string(message.gx);
        }
        if (message.gy !== "") {
            writer.uint32(18).string(message.gy);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSGXEC256Signature();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.gx = reader.string();
                    break;
                case 2:
                    message.gy = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            gx: isSet(object.gx) ? String(object.gx) : "",
            gy: isSet(object.gy) ? String(object.gy) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.gx !== undefined && (obj.gx = message.gx);
        message.gy !== undefined && (obj.gy = message.gy);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSGXEC256Signature();
        message.gx = (_a = object.gx) !== null && _a !== void 0 ? _a : "";
        message.gy = (_b = object.gy) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBasePlatformInfoBlob() {
    return {
        sgxEpidGroupFlags: 0,
        sgxTcbEvaluationFlags: 0,
        pseEvaluationFlags: 0,
        latestEquivalentTcbPsvn: "",
        latestPseIsvsvn: "",
        latestPsdaSvn: "",
        xeid: 0,
        gid: 0,
        sgxEc256SignatureT: undefined,
    };
}
exports.PlatformInfoBlob = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.sgxEpidGroupFlags !== 0) {
            writer.uint32(8).uint32(message.sgxEpidGroupFlags);
        }
        if (message.sgxTcbEvaluationFlags !== 0) {
            writer.uint32(16).uint32(message.sgxTcbEvaluationFlags);
        }
        if (message.pseEvaluationFlags !== 0) {
            writer.uint32(24).uint32(message.pseEvaluationFlags);
        }
        if (message.latestEquivalentTcbPsvn !== "") {
            writer.uint32(34).string(message.latestEquivalentTcbPsvn);
        }
        if (message.latestPseIsvsvn !== "") {
            writer.uint32(42).string(message.latestPseIsvsvn);
        }
        if (message.latestPsdaSvn !== "") {
            writer.uint32(50).string(message.latestPsdaSvn);
        }
        if (message.xeid !== 0) {
            writer.uint32(56).uint32(message.xeid);
        }
        if (message.gid !== 0) {
            writer.uint32(64).uint32(message.gid);
        }
        if (message.sgxEc256SignatureT !== undefined) {
            exports.SGXEC256Signature.encode(message.sgxEc256SignatureT, writer.uint32(74).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlatformInfoBlob();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sgxEpidGroupFlags = reader.uint32();
                    break;
                case 2:
                    message.sgxTcbEvaluationFlags = reader.uint32();
                    break;
                case 3:
                    message.pseEvaluationFlags = reader.uint32();
                    break;
                case 4:
                    message.latestEquivalentTcbPsvn = reader.string();
                    break;
                case 5:
                    message.latestPseIsvsvn = reader.string();
                    break;
                case 6:
                    message.latestPsdaSvn = reader.string();
                    break;
                case 7:
                    message.xeid = reader.uint32();
                    break;
                case 8:
                    message.gid = reader.uint32();
                    break;
                case 9:
                    message.sgxEc256SignatureT = exports.SGXEC256Signature.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sgxEpidGroupFlags: isSet(object.sgxEpidGroupFlags)
                ? Number(object.sgxEpidGroupFlags)
                : 0,
            sgxTcbEvaluationFlags: isSet(object.sgxTcbEvaluationFlags)
                ? Number(object.sgxTcbEvaluationFlags)
                : 0,
            pseEvaluationFlags: isSet(object.pseEvaluationFlags)
                ? Number(object.pseEvaluationFlags)
                : 0,
            latestEquivalentTcbPsvn: isSet(object.latestEquivalentTcbPsvn)
                ? String(object.latestEquivalentTcbPsvn)
                : "",
            latestPseIsvsvn: isSet(object.latestPseIsvsvn)
                ? String(object.latestPseIsvsvn)
                : "",
            latestPsdaSvn: isSet(object.latestPsdaSvn)
                ? String(object.latestPsdaSvn)
                : "",
            xeid: isSet(object.xeid) ? Number(object.xeid) : 0,
            gid: isSet(object.gid) ? Number(object.gid) : 0,
            sgxEc256SignatureT: isSet(object.sgxEc256SignatureT)
                ? exports.SGXEC256Signature.fromJSON(object.sgxEc256SignatureT)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.sgxEpidGroupFlags !== undefined &&
            (obj.sgxEpidGroupFlags = Math.round(message.sgxEpidGroupFlags));
        message.sgxTcbEvaluationFlags !== undefined &&
            (obj.sgxTcbEvaluationFlags = Math.round(message.sgxTcbEvaluationFlags));
        message.pseEvaluationFlags !== undefined &&
            (obj.pseEvaluationFlags = Math.round(message.pseEvaluationFlags));
        message.latestEquivalentTcbPsvn !== undefined &&
            (obj.latestEquivalentTcbPsvn = message.latestEquivalentTcbPsvn);
        message.latestPseIsvsvn !== undefined &&
            (obj.latestPseIsvsvn = message.latestPseIsvsvn);
        message.latestPsdaSvn !== undefined &&
            (obj.latestPsdaSvn = message.latestPsdaSvn);
        message.xeid !== undefined && (obj.xeid = Math.round(message.xeid));
        message.gid !== undefined && (obj.gid = Math.round(message.gid));
        message.sgxEc256SignatureT !== undefined &&
            (obj.sgxEc256SignatureT = message.sgxEc256SignatureT
                ? exports.SGXEC256Signature.toJSON(message.sgxEc256SignatureT)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBasePlatformInfoBlob();
        message.sgxEpidGroupFlags = (_a = object.sgxEpidGroupFlags) !== null && _a !== void 0 ? _a : 0;
        message.sgxTcbEvaluationFlags = (_b = object.sgxTcbEvaluationFlags) !== null && _b !== void 0 ? _b : 0;
        message.pseEvaluationFlags = (_c = object.pseEvaluationFlags) !== null && _c !== void 0 ? _c : 0;
        message.latestEquivalentTcbPsvn = (_d = object.latestEquivalentTcbPsvn) !== null && _d !== void 0 ? _d : "";
        message.latestPseIsvsvn = (_e = object.latestPseIsvsvn) !== null && _e !== void 0 ? _e : "";
        message.latestPsdaSvn = (_f = object.latestPsdaSvn) !== null && _f !== void 0 ? _f : "";
        message.xeid = (_g = object.xeid) !== null && _g !== void 0 ? _g : 0;
        message.gid = (_h = object.gid) !== null && _h !== void 0 ? _h : 0;
        message.sgxEc256SignatureT =
            object.sgxEc256SignatureT !== undefined &&
                object.sgxEc256SignatureT !== null
                ? exports.SGXEC256Signature.fromPartial(object.sgxEc256SignatureT)
                : undefined;
        return message;
    },
};
var globalThis = (() => {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
const atob = globalThis.atob ||
    ((b64) => globalThis.Buffer.from(b64, "base64").toString("binary"));
function bytesFromBase64(b64) {
    const bin = atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
const btoa = globalThis.btoa ||
    ((bin) => globalThis.Buffer.from(bin, "binary").toString("base64"));
function base64FromBytes(arr) {
    const bin = [];
    for (const byte of arr) {
        bin.push(String.fromCharCode(byte));
    }
    return btoa(bin.join(""));
}
function longToString(long) {
    return long.toString();
}
if (_m0.util.Long !== long_1.default) {
    _m0.util.Long = long_1.default;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=types.js.map