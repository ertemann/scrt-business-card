import { grpc } from "@improbable-eng/grpc-web";
import * as _m0 from "protobufjs/minimal";
import { Empty } from "../../../google/protobuf/empty";
import { Key } from "../../../secret/registration/v1beta1/msg";
export declare const protobufPackage = "secret.registration.v1beta1";
export interface QueryEncryptedSeedRequest {
    pubKey: Uint8Array;
}
export interface QueryEncryptedSeedResponse {
    /** [(gogoproto.nullable) = false]; */
    encryptedSeed: Uint8Array;
}
export declare const QueryEncryptedSeedRequest: {
    encode(message: QueryEncryptedSeedRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryEncryptedSeedRequest;
    fromJSON(object: any): QueryEncryptedSeedRequest;
    toJSON(message: QueryEncryptedSeedRequest): unknown;
    fromPartial<I extends {
        pubKey?: Uint8Array | undefined;
    } & {
        pubKey?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, "pubKey">, never>>(object: I): QueryEncryptedSeedRequest;
};
export declare const QueryEncryptedSeedResponse: {
    encode(message: QueryEncryptedSeedResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryEncryptedSeedResponse;
    fromJSON(object: any): QueryEncryptedSeedResponse;
    toJSON(message: QueryEncryptedSeedResponse): unknown;
    fromPartial<I extends {
        encryptedSeed?: Uint8Array | undefined;
    } & {
        encryptedSeed?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, "encryptedSeed">, never>>(object: I): QueryEncryptedSeedResponse;
};
/** Query provides defines the gRPC querier service */
export interface Query {
    /** Returns the key used for transactions */
    txKey(request: DeepPartial<Empty>, metadata?: grpc.Metadata): Promise<Key>;
    /** Returns the key used for registration */
    registrationKey(request: DeepPartial<Empty>, metadata?: grpc.Metadata): Promise<Key>;
    /** Returns the encrypted seed for a registered node by public key */
    encryptedSeed(request: DeepPartial<QueryEncryptedSeedRequest>, metadata?: grpc.Metadata): Promise<QueryEncryptedSeedResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    txKey(request: DeepPartial<Empty>, metadata?: grpc.Metadata): Promise<Key>;
    registrationKey(request: DeepPartial<Empty>, metadata?: grpc.Metadata): Promise<Key>;
    encryptedSeed(request: DeepPartial<QueryEncryptedSeedRequest>, metadata?: grpc.Metadata): Promise<QueryEncryptedSeedResponse>;
}
export declare const QueryDesc: {
    serviceName: string;
};
export declare const QueryTxKeyDesc: UnaryMethodDefinitionish;
export declare const QueryRegistrationKeyDesc: UnaryMethodDefinitionish;
export declare const QueryEncryptedSeedDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
declare type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
//# sourceMappingURL=query.d.ts.map